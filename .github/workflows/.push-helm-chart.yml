name: .Deploys

on:
  workflow_call:
    inputs:
      ### Required
      release:
        description: Deployment release; usually PR number, test or prod
        required: true
        type: string

      ### Typical / recommended
      autoscaling:
        description: Autoscaling enabled or not for the deployments
        required: false
        type: string
        default: true
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      tag:
        description: Container tag; usually PR number
        required: false
        type: string
        default: ${{ github.event.number }}
      triggers:
        description: Paths to trigger a deploy; omit=always; e.g. ('backend/' 'frontend/')
        required: false
        type: string

      ### Usually a bad idea / not recommended
      directory:
        description: 'Chart directory'
        default: 'charts/${{ github.event.repository.name }}'
        required: false
        type: string
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string
      params:
        description: 'Extra parameters to pass to helm upgrade'
        default: ''
        required: false
        type: string

env:
  repo_release: ${{ github.event.repository.name }}-${{ inputs.release }}
  package_tag: ${{ inputs.tag }}

jobs:
  deploys:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v4
      - name: Check Deployment Triggers
        id: triggers
        run: |
          # Expand for trigger processing

          # Always deploy if no triggers are provided
          if [ -z "${{ inputs.triggers }}" ]; then
            echo "Always deploy when no triggers are provided"
            echo "triggered=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Deploy if changed files (git diff) match triggers
          TRIGGERS=${{ inputs.triggers }}
          git fetch origin ${{ github.event.repository.default_branch }}
          while read -r check; do
            for t in "${TRIGGERS[@]}"; do
              if [[ "${check}" =~ "${t}" ]]; then
                  echo "Build triggered based on git diff"
                  echo -e "${t}\n --> ${check}"
                  echo "triggered=true" >> $GITHUB_OUTPUT
                  exit 0
              fi
            done
          done < <(git diff origin/${{ github.event.repository.default_branch }} --name-only)

          # If here skip deployment
          echo "No triggers have fired, deployment skipped"

      - name: Setup SSH for Target Repository
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.MANIFEST_REPO_DEPLOY_KEY_PUB }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa.pub
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

      - name: Checkout target repository using SSH
        uses: actions/checkout@v2
        with:
          repository: ${{ vars.GITOPS_REPO}}
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          path: 'target-repo'


      - name: Copy Helm Chart
        run: |
          cp -r ./charts/* target-repo/helm-chart/

      - name: Setup Git Config so that we can commit with a name
        run: |
          git config --global user.name "${{ vars.GLOBAL_USER}}"
          git config --global user.email "${{ vars.GLOBAL_EMAIL}}"

      - name: Check if branch exists and update
        run: |
          cd target-repo
          git fetch
          if git rev-parse --verify origin/update-helm-chart-${{ inputs.tag }}; then
            git checkout update-helm-chart-${{ inputs.tag }}
            git pull origin update-helm-chart-${{ inputs.tag }}
          else
            git checkout -b update-helm-chart-${{ inputs.tag }}
          fi
  
      - name: Commit and Push changes
        run: |
          cd target-repo
          git add .
          git commit -m "update helm chart ${{ inputs.tag }}"
          git push origin update-helm-chart-${{ inputs.tag }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          branch: update-helm-chart-${{ inputs.tag }}
          title: "feat: update helm ${{ inputs.tag }}"
          body: "Helm updates"
          token: ${{ secrets.GITOPS_PAT }}  # GITHUB_TOKEN is still needed for PR creation