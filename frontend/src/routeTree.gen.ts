/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as ProtectedByRoleImport } from './routes/protectedByRole'
import { Route as ProtectedImport } from './routes/protected'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedByRoleRoute = ProtectedByRoleImport.update({
  id: '/protectedByRole',
  path: '/protectedByRole',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/protected': {
      id: '/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/protectedByRole': {
      id: '/protectedByRole'
      path: '/protectedByRole'
      fullPath: '/protectedByRole'
      preLoaderRoute: typeof ProtectedByRoleImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protectedByRole': typeof ProtectedByRoleRoute
  '/unauthorized': typeof UnauthorizedRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protectedByRole': typeof ProtectedByRoleRoute
  '/unauthorized': typeof UnauthorizedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/protected': typeof ProtectedRoute
  '/protectedByRole': typeof ProtectedByRoleRoute
  '/unauthorized': typeof UnauthorizedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/protected'
    | '/protectedByRole'
    | '/unauthorized'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/protected' | '/protectedByRole' | '/unauthorized'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/protected'
    | '/protectedByRole'
    | '/unauthorized'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProtectedRoute: typeof ProtectedRoute
  ProtectedByRoleRoute: typeof ProtectedByRoleRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProtectedRoute: ProtectedRoute,
  ProtectedByRoleRoute: ProtectedByRoleRoute,
  UnauthorizedRoute: UnauthorizedRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/protected",
        "/protectedByRole",
        "/unauthorized"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/protected": {
      "filePath": "protected.tsx"
    },
    "/protectedByRole": {
      "filePath": "protectedByRole.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
